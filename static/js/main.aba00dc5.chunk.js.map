{"version":3,"sources":["navbar.jsx","tweetContext.jsx","Tweet.jsx","newTweet.jsx","tweetList.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","tweetContext","createContext","TweetProvider","props","useState","users","setUsers","Provider","value","children","Tweet","useContext","likes","setLikes","dislikes","setDislikes","useEffect","map","user","id","console","log","name","message","onClick","NewTweet","setName","setMessage","setId","onSubmit","e","preventDefault","prevUsers","type","placeholder","onChange","target","TweetList","length","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aba00dc5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar() {\n  return (\n    <div>\n      <nav className=\"navbar sticky-top navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#!\">\n          Tweeter\n        </a>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React, { useState, createContext } from \"react\";\n\nexport const tweetContext = createContext();\n\nexport const TweetProvider = props => {\n  const [users, setUsers] = useState(\n    [] /* [\n    {\n      name: \"Phil\",\n      message: \"S.H.I.E.L.D is HYDRA\",\n      likes: \"50000\"\n    },\n    {\n      name: \"Coulson\",\n      message: \"I am the Director\",\n      likes: \"500\"\n    },\n    {\n      name: \"Daisy\",\n      message: \"I am a hacker\",\n      likes: \"9987\"\n    },\n    {\n      name: \"Jhonson\",\n      message: \"I can hack SHIELD\",\n      likes: \"989\"\n    }\n  ] */\n  );\n  return (\n    <tweetContext.Provider value={[users, setUsers]}>\n      {props.children}\n    </tweetContext.Provider>\n  );\n};\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { tweetContext } from \"./tweetContext\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction Tweet(props) {\n  const [users, setUsers] = useContext(tweetContext);\n  const [likes, setLikes] = useState(0);\n  const [dislikes, setDislikes] = useState(0);\n  const Updatelikes = () => {\n    if (likes > 0) return <h5>Likes : {likes}</h5>;\n    else return null;\n  };\n  const Updatedislikes = () => {\n    if (dislikes > 0) return <h5>Dislikes : {dislikes}</h5>;\n    else return null;\n  };\n  const increaseLikes = () => {\n    setLikes(likes + 1);\n  };\n  const increaseDislikes = () => {\n    setDislikes(dislikes + 1);\n  };\n  useEffect(() => {\n    users.map(user => {\n      if (user.id === props.id) {\n        user.likes = likes;\n        user.dislikes = dislikes;\n      }\n    });\n    console.log(users);\n  }, [likes, dislikes]);\n  return (\n    <div className=\"tweet\">\n      <div className=\"delete\">\n        <h3>{props.name}</h3>\n        {/* <button\n          className=\"btn btn-primary ml-5 mr-0\"\n          onClick={() => props.onDelete(props.likes)}\n        >\n          X\n        </button> */}\n      </div>\n      <p>{props.message}</p>\n      <div className=\"flex\">\n        <button onClick={increaseLikes} className=\"btn btn-primary mx-2\">\n          Like\n        </button>\n        <button onClick={increaseDislikes} className=\"btn btn-primary mx-2\">\n          Dislike\n        </button>\n      </div>\n      <div className=\"flex\">\n        <Updatelikes />\n        <Updatedislikes />\n      </div>\n    </div>\n  );\n}\n\nexport default Tweet;\n","import React, { useState, useContext } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Tweet from \"./Tweet\";\nimport { tweetContext } from \"./tweetContext\";\n\nfunction NewTweet(props) {\n  const [users, setUsers] = useContext(tweetContext);\n  const [name, setName] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const [id, setId] = useState(1);\n\n  const updateName = e => {\n    setName(e.target.value);\n  };\n\n  const updateMessage = e => {\n    setMessage(e.target.value);\n  };\n\n  const addTweet = e => {\n    e.preventDefault();\n    setUsers(prevUsers => [\n      ...prevUsers,\n      { name: name, message: message, id: id }\n    ]);\n    setName(\"\");\n    setMessage(\"\");\n\n    setId(id + 1);\n  };\n  return (\n    <div>\n      <form onSubmit={addTweet}>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-4 col-form-label\">Name : </label>\n          <div className=\"col-sm-8\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"Name\"\n              placeholder=\"Name\"\n              value={name}\n              onChange={updateName}\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label className=\"col-sm-4 col-form-label\">Message :</label>\n          <div className=\"col-sm-8\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"Message\"\n              placeholder=\"Message\"\n              value={message}\n              onChange={updateMessage}\n            />\n          </div>\n        </div>\n        {/* <div className=\"form-group row\">\n          <label className=\"col-sm-4 col-form-label\">Likes :</label>\n          <div className=\"col-sm-8\">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"Likes\"\n              placeholder=\"Likes\"\n              value={likes}\n              onChange={updateLikes}\n            />\n          </div>\n        </div> */}\n        <div className=\"form-group row\">\n          <div className=\"col-sm-10 offset-sm-2\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Add Tweet\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default NewTweet;\n","import React, { useState, useContext } from \"react\";\nimport \"./App.css\";\nimport Tweet from \"./Tweet\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport newTweet from \"./newTweet\";\nimport { tweetContext } from \"./tweetContext\";\n\nfunction TweetList() {\n  const [users, setUsers] = useContext(tweetContext);\n\n  /* const handleDelete = tweetId => {\n    const tweets = users.filter(user => user.likes !== tweetId);\n    setUsers({ tweets });\n  }; */\n\n  return (\n    <div>\n      <h1 className=\"text-warning\">No. of Tweets : {users.length}</h1>\n      {users.map(user => (\n        <Tweet\n          name={user.name}\n          message={user.message}\n          key={user.id}\n          id={user.id}\n          likes={user.likes}\n          dislikes={user.dislikes}\n          /* onDelete={handleDelete} */\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TweetList;\n","import React, { useState, useContext } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./navbar\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NewTweet from \"./newTweet\";\nimport { TweetProvider } from \"./tweetContext\";\nimport TweetList from \"./tweetList\";\n\nfunction App() {\n  return (\n    <TweetProvider>\n      <Navbar />\n      <div className=\"app\">\n        <NewTweet />\n\n        <TweetList />\n      </div>\n    </TweetProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}